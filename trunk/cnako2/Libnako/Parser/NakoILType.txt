// 何もしない
NOP {args:0, push:0, pop:0}

// 定数をスタックに乗せる
LD_CONST_INT   {args:1, push:1, pop:0}
LD_CONST_REAL  {args:1, push:1, pop:0}
LD_CONST_STR   {args:1, push:1, pop:0}

//  変数をスタックに乗せる load(varno)
LD_GLOBAL      {args:1, push:1, pop:0}
LD_LOCAL       {args:1, push:1, pop:0}

// スタックから下ろして値を変数に記憶する set(varno)
ST_GLOBAL      {args:1, push:0, pop:1} 
ST_LOCAL       {args:1, push:0, pop:1} 

// 配列
NEW_ARR        { args:1, push:1, pop:0 }
ST_ARR_ELEM    { args:0, push:0, pop:3 } // stack [var, index, value]
LD_ARR_ELEM    { args:0, push:1, pop:2 } // stack [bar, index]

// 計算する
ADD            { args:0, push:1, pop:2 }
SUB            { args:0, push:1, pop:2 }
MUL            { args:0, push:1, pop:2 }
DIV            { args:0, push:1, pop:2 }
MOD            { args:0, push:1, pop:2 }
POWER          { args:0, push:1, pop:2 }
ADD_STR        { args:0, push:1, pop:2 }
// 比較する
EQ      { args:0, push:1, pop:2 }
NOT_EQ  { args:0, push:1, pop:2 }
GT      { args:0, push:1, pop:2 }
GT_EQ   { args:0, push:1, pop:2 }
LT      { args:0, push:1, pop:2 }
LT_EQ   { args:0, push:1, pop:2 }
// スタックトップの値を増減する
INC     { args:0, push:1, pop:1 }
DEC     { args:0, push:1, pop:1 }
NEG     { args:0, push:1, pop:1 }
// 演算
AND      { args:0, push:1, pop:2 }
OR       { args:0, push:1, pop:2 }
XOR      { args:0, push:1, pop:2 }
NOT		 { args:0, push:1, pop:1 }

// アドレスジャンプ
JUMP    { args:1, push:0, pop:0 }
CALL    { args:1, push:0, pop:0 }
RET     { args:0, push:0, pop:0 }
BRANCH_TRUE  { args:1, push:0, pop:1 }
BRANCH_FALSE { args:1, push:0, pop:1 }

// DEBUG用
PRINT   { args:0, push:0, pop:1 }


